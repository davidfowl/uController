
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#if NET7_0_OR_GREATER
using System.Diagnostics;
using System.Reflection;
using Microsoft.AspNetCore.Routing.Patterns;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.FileProviders;
using Microsoft.Extensions.Primitives;

using MetadataPopulator = System.Action<System.Delegate, Microsoft.AspNetCore.Builder.EndpointBuilder>;
using RequestDelegateFactoryFunc = System.Func<System.Delegate, Microsoft.AspNetCore.Builder.EndpointBuilder, Microsoft.AspNetCore.Http.RequestDelegate>;

namespace Microsoft.AspNetCore.Builder
{
    internal record SourceKey(string Path, int Line);
}

internal static class GeneratedRouteBuilderExtensions
{
    private static readonly string[] GetVerb = new[] { HttpMethods.Get };
    private static readonly string[] PostVerb = new[] { HttpMethods.Post };
    private static readonly string[] PutVerb = new[]  { HttpMethods.Put };
    private static readonly string[] DeleteVerb = new[] { HttpMethods.Delete };
    private static readonly string[] PatchVerb = new[] { HttpMethods.Patch };

    private class GenericThunks<T>
    {
        public static readonly System.Collections.Generic.Dictionary<(string, int), (MetadataPopulator, RequestDelegateFactoryFunc)> map = new()
        {
            [(@"C:\dev\git\uController\samples\Program.cs", 19)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 19));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(T)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<T>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler());
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = handler();
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),


        };
    }

    private static readonly System.Collections.Generic.Dictionary<(string, int), (MetadataPopulator, RequestDelegateFactoryFunc)> map = new()
    {
            [(@"C:\dev\git\uController\samples\MapTodos.cs", 9)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\MapTodos.cs", 9));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(System.Collections.Generic.List<Todo>)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<TodoDbContext, System.Threading.Tasks.Task<System.Collections.Generic.List<Todo>>>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var ispis = builder.ApplicationServices.GetService<IServiceProviderIsService>();
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<TodoDbContext>> arg_dbServiceOrBodyResolver = (ispis?.IsService(typeof(TodoDbContext)) ?? false) ? ResolveService<TodoDbContext> : ResolveBody<TodoDbContext>;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<TodoDbContext>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_db = await arg_dbServiceOrBodyResolver(httpContext);
                    var result = await handler(arg_db);
                    await httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_db = await arg_dbServiceOrBodyResolver(httpContext);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_db));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\MapTodos.cs", 17)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\MapTodos.cs", 17));
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.Ok<Todo>>(del.Method, builder);
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.NotFound>(del.Method, builder);
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, TodoDbContext, System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IResult>>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var ispis = builder.ApplicationServices.GetService<IServiceProviderIsService>();
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<TodoDbContext>> arg_dbServiceOrBodyResolver = (ispis?.IsService(typeof(TodoDbContext)) ?? false) ? ResolveService<TodoDbContext> : ResolveBody<TodoDbContext>;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0), ic.GetArgument<TodoDbContext>(1)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = httpContext.Request.RouteValues["id"]?.ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_db = await arg_dbServiceOrBodyResolver(httpContext);
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return;
                    }
                    var result = await handler(arg_id, arg_db);
                    await result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = httpContext.Request.RouteValues["id"]?.ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_db = await arg_dbServiceOrBodyResolver(httpContext);
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id, arg_db));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\MapTodos.cs", 29)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\MapTodos.cs", 29));
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.NotFound>(del.Method, builder);
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.NoContent>(del.Method, builder);
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, Todo, TodoDbContext, System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IResult>>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var ispis = builder.ApplicationServices.GetService<IServiceProviderIsService>();
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<Todo>> arg_todoServiceOrBodyResolver = (ispis?.IsService(typeof(Todo)) ?? false) ? ResolveService<Todo> : ResolveBody<Todo>;
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<TodoDbContext>> arg_dbServiceOrBodyResolver = (ispis?.IsService(typeof(TodoDbContext)) ?? false) ? ResolveService<TodoDbContext> : ResolveBody<TodoDbContext>;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0), ic.GetArgument<Todo>(1), ic.GetArgument<TodoDbContext>(2)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = httpContext.Request.RouteValues["id"]?.ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_todo = await arg_todoServiceOrBodyResolver(httpContext);
                    var arg_db = await arg_dbServiceOrBodyResolver(httpContext);
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return;
                    }
                    var result = await handler(arg_id, arg_todo, arg_db);
                    await result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = httpContext.Request.RouteValues["id"]?.ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_todo = await arg_todoServiceOrBodyResolver(httpContext);
                    var arg_db = await arg_dbServiceOrBodyResolver(httpContext);
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id, arg_todo, arg_db));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\MapTodos.cs", 48)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\MapTodos.cs", 48));
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.Created<Todo>>(del.Method, builder);
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Todo, TodoDbContext, System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IResult>>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var ispis = builder.ApplicationServices.GetService<IServiceProviderIsService>();
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<Todo>> arg_todoServiceOrBodyResolver = (ispis?.IsService(typeof(Todo)) ?? false) ? ResolveService<Todo> : ResolveBody<Todo>;
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<TodoDbContext>> arg_dbServiceOrBodyResolver = (ispis?.IsService(typeof(TodoDbContext)) ?? false) ? ResolveService<TodoDbContext> : ResolveBody<TodoDbContext>;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Todo>(0), ic.GetArgument<TodoDbContext>(1)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_todo = await arg_todoServiceOrBodyResolver(httpContext);
                    var arg_db = await arg_dbServiceOrBodyResolver(httpContext);
                    var result = await handler(arg_todo, arg_db);
                    await result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_todo = await arg_todoServiceOrBodyResolver(httpContext);
                    var arg_db = await arg_dbServiceOrBodyResolver(httpContext);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_todo, arg_db));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\MapTodos.cs", 58)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\MapTodos.cs", 58));
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.Ok<Todo>>(del.Method, builder);
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.NotFound>(del.Method, builder);
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, TodoDbContext, System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IResult>>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var ispis = builder.ApplicationServices.GetService<IServiceProviderIsService>();
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<TodoDbContext>> arg_dbServiceOrBodyResolver = (ispis?.IsService(typeof(TodoDbContext)) ?? false) ? ResolveService<TodoDbContext> : ResolveBody<TodoDbContext>;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0), ic.GetArgument<TodoDbContext>(1)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = httpContext.Request.RouteValues["id"]?.ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_db = await arg_dbServiceOrBodyResolver(httpContext);
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return;
                    }
                    var result = await handler(arg_id, arg_db);
                    await result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = httpContext.Request.RouteValues["id"]?.ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_db = await arg_dbServiceOrBodyResolver(httpContext);
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id, arg_db));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 16)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 16));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler());
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = handler();
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 17)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 17));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string, string>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<string>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = httpContext.Request.RouteValues["name"]?.ToString();
                    var result = handler(arg_name);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = httpContext.Request.RouteValues["name"]?.ToString();
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_name));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 21)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 21));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(Person)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Person>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler());
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = handler();
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 23)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 23));
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.Ok<string>>(del.Method, builder);
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<System.Security.Claims.ClaimsPrincipal, ISayHello, Microsoft.AspNetCore.Http.IResult>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var ispis = builder.ApplicationServices.GetService<IServiceProviderIsService>();
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<ISayHello>> arg_hellosvcServiceOrBodyResolver = (ispis?.IsService(typeof(ISayHello)) ?? false) ? ResolveService<ISayHello> : ResolveBody<ISayHello>;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<System.Security.Claims.ClaimsPrincipal>(0), ic.GetArgument<ISayHello>(1)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_c = httpContext.User;
                    var arg_hellosvc = await arg_hellosvcServiceOrBodyResolver(httpContext);
                    var result = handler(arg_c, arg_hellosvc);
                    await result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_c = httpContext.User;
                    var arg_hellosvc = await arg_hellosvcServiceOrBodyResolver(httpContext);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_c, arg_hellosvc));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 25)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 25));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(System.Text.Json.Nodes.JsonNode)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<System.Text.Json.Nodes.JsonNode, System.Text.Json.Nodes.JsonNode>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var ispis = builder.ApplicationServices.GetService<IServiceProviderIsService>();
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<System.Text.Json.Nodes.JsonNode>> arg_nodeServiceOrBodyResolver = (ispis?.IsService(typeof(System.Text.Json.Nodes.JsonNode)) ?? false) ? ResolveService<System.Text.Json.Nodes.JsonNode> : ResolveBody<System.Text.Json.Nodes.JsonNode>;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<System.Text.Json.Nodes.JsonNode>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_node = await arg_nodeServiceOrBodyResolver(httpContext);
                    var result = handler(arg_node);
                    await httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_node = await arg_nodeServiceOrBodyResolver(httpContext);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_node));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 26)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 26));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(System.Text.Json.Nodes.JsonNode)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<System.Text.Json.Nodes.JsonNode, System.Text.Json.Nodes.JsonNode>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<System.Text.Json.Nodes.JsonNode>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_node = await ResolveBody<System.Text.Json.Nodes.JsonNode>(httpContext);
                    var result = handler(arg_node);
                    await httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_node = await ResolveBody<System.Text.Json.Nodes.JsonNode>(httpContext);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_node));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 28)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 28));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(Model)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Model, Model>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var parameterInfos = del.Method.GetParameters();
                var arg_mParameterInfo = parameterInfos[0];
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Model>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_m = await Model.BindAsync(httpContext, arg_mParameterInfo);
                    var result = handler(arg_m);
                    await httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_m = await Model.BindAsync(httpContext, arg_mParameterInfo);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_m));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 29)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 29));
            }, 
           (del, builder) => 
            {
                var handler = (System.Action<Model>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var parameterInfos = del.Method.GetParameters();
                var arg_mParameterInfo = parameterInfos[0];
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        handler(ic.GetArgument<Model>(0));
                        return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_m = await Model.BindAsync(httpContext, arg_mParameterInfo);
                    handler(arg_m);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_m = await Model.BindAsync(httpContext, arg_mParameterInfo);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_m));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 31)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 31));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Microsoft.AspNetCore.Http.IFormFile, string>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Microsoft.AspNetCore.Http.IFormFile>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var formCollection = await httpContext.Request.ReadFormAsync();
                    var arg_file = formCollection.Files["file"];
                    var result = handler(arg_file);
                    await httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var formCollection = await httpContext.Request.ReadFormAsync();
                    var arg_file = formCollection.Files["file"];
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_file));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 36)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 36));
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.NotFound>(del.Method, builder);
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.Ok<string>>(del.Method, builder);
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string, Microsoft.AspNetCore.Http.IResult>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_nameRouteOrQueryResolver = routePattern?.GetParameter("name") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<string>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = arg_nameRouteOrQueryResolver(httpContext, "name").ToString();
                    var result = handler(arg_name);
                    return result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = arg_nameRouteOrQueryResolver(httpContext, "name").ToString();
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_name));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 39)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 39));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Microsoft.AspNetCore.Http.IFormCollection, string>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Microsoft.AspNetCore.Http.IFormCollection>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var formCollection = await httpContext.Request.ReadFormAsync();
                    var arg_formCollection = formCollection;
                    var result = handler(arg_formCollection);
                    await httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var formCollection = await httpContext.Request.ReadFormAsync();
                    var arg_formCollection = formCollection;
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_formCollection));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 44)] = (
           (del, builder) => 
            {
                var parameterInfos = del.Method.GetParameters();
                PopulateMetadata<MinimalApis.Extensions.Binding.Body<string>>(parameterInfos[0], builder);
                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 44));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<MinimalApis.Extensions.Binding.Body<string>, string>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var parameterInfos = del.Method.GetParameters();
                var arg_bodyParameterInfo = parameterInfos[0];
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<MinimalApis.Extensions.Binding.Body<string>>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_body = await MinimalApis.Extensions.Binding.Body<string>.BindAsync(httpContext, arg_bodyParameterInfo);
                    var result = handler(arg_body);
                    await httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_body = await MinimalApis.Extensions.Binding.Body<string>.BindAsync(httpContext, arg_bodyParameterInfo);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_body));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 46)] = (
           (del, builder) => 
            {
                var parameterInfos = del.Method.GetParameters();
                PopulateMetadata<MinimalApis.Extensions.Binding.Validated<Model>>(parameterInfos[0], builder);
                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 46));
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.ValidationProblem>(del.Method, builder);
                PopulateMetadata<Microsoft.AspNetCore.Http.HttpResults.Ok>(del.Method, builder);
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<MinimalApis.Extensions.Binding.Validated<Model>, Microsoft.AspNetCore.Http.IResult>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var parameterInfos = del.Method.GetParameters();
                var arg_modelParameterInfo = parameterInfos[0];
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<MinimalApis.Extensions.Binding.Validated<Model>>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_model = await MinimalApis.Extensions.Binding.Validated<Model>.BindAsync(httpContext, arg_modelParameterInfo);
                    var result = handler(arg_model);
                    await result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_model = await MinimalApis.Extensions.Binding.Validated<Model>.BindAsync(httpContext, arg_modelParameterInfo);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_model));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 55)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 55));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(object)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<System.Threading.CancellationToken, object>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<System.Threading.CancellationToken>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_ct = httpContext.RequestAborted;
                    var result = handler(arg_ct);
                    return ExecuteObjectResult(result, httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_ct = httpContext.RequestAborted;
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_ct));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 59)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 59));
                builder.Metadata.Add(ResponseTypeMetadata.Create(401));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int?, Microsoft.AspNetCore.Http.IResult>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_idRouteOrQueryResolver = routePattern?.GetParameter("id") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int?>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int? arg_id;
                    if (arg_id_Value != null && int.TryParse(arg_id_Value, out var arg_id_Temp))
                    {
                        arg_id = arg_id_Temp;
                    }
                    else
                    {
                        arg_id = default;
                    }
                    var result = handler(arg_id);
                    return result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int? arg_id;
                    if (arg_id_Value != null && int.TryParse(arg_id_Value, out var arg_id_Temp))
                    {
                        arg_id = arg_id_Temp;
                    }
                    else
                    {
                        arg_id = default;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 61)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 61));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<System.IO.Stream, Microsoft.AspNetCore.Http.IResult>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<System.IO.Stream>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_s = httpContext.Request.Body;
                    var result = handler(arg_s);
                    return result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_s = httpContext.Request.Body;
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_s));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 62)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 62));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<System.IO.Pipelines.PipeReader, Microsoft.AspNetCore.Http.IResult>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<System.IO.Pipelines.PipeReader>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_r = httpContext.Request.BodyReader;
                    var result = handler(arg_r);
                    return result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_r = httpContext.Request.BodyReader;
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_r));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 64)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 64));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Microsoft.AspNetCore.Http.HttpRequest, Microsoft.AspNetCore.Http.HttpResponse, System.Threading.Tasks.Task>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Microsoft.AspNetCore.Http.HttpRequest>(0), ic.GetArgument<Microsoft.AspNetCore.Http.HttpResponse>(1)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_req = httpContext.Request;
                    var arg_resp = httpContext.Response;
                    return handler(arg_req, arg_resp);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_req = httpContext.Request;
                    var arg_resp = httpContext.Response;
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_req, arg_resp));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 66)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 66));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(string?[])));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Microsoft.Extensions.Primitives.StringValues, string?[]>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_queriesRouteOrQueryResolver = routePattern?.GetParameter("queries") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Microsoft.Extensions.Primitives.StringValues>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_queries = arg_queriesRouteOrQueryResolver(httpContext, "queries");
                    var result = handler(arg_queries);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_queries = arg_queriesRouteOrQueryResolver(httpContext, "queries");
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_queries));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 67)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 67));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(string[])));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string[], string[]>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_queriesRouteOrQueryResolver = routePattern?.GetParameter("queries") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<string[]>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_queries = arg_queriesRouteOrQueryResolver(httpContext, "queries").ToArray();
                    var result = handler(arg_queries);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_queries = arg_queriesRouteOrQueryResolver(httpContext, "queries").ToArray();
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_queries));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 68)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 68));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(int[])));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int[], int[]>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_queriesRouteOrQueryResolver = routePattern?.GetParameter("queries") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int[]>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_queries_Value = arg_queriesRouteOrQueryResolver(httpContext, "queries").ToArray();
                    int[] arg_queries = default;
                    for (var i = 0; i < arg_queries.Length; i++)
                    {
                        arg_queries ??= new int[arg_queries_Value.Length];
                        if (arg_queries_Value[i] == null || !int.TryParse(arg_queries_Value[i], out arg_queries[i]))
                        {
                            arg_queries[i] = default;
                            wasParamCheckFailure = true;
                        }
                    }
                    arg_queries ??= System.Array.Empty<int>();
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_queries);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_queries_Value = arg_queriesRouteOrQueryResolver(httpContext, "queries").ToArray();
                    int[] arg_queries = default;
                    for (var i = 0; i < arg_queries.Length; i++)
                    {
                        arg_queries ??= new int[arg_queries_Value.Length];
                        if (arg_queries_Value[i] == null || !int.TryParse(arg_queries_Value[i], out arg_queries[i]))
                        {
                            arg_queries[i] = default;
                            wasParamCheckFailure = true;
                        }
                    }
                    arg_queries ??= System.Array.Empty<int>();
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_queries));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 73)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 73));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(Person)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Person>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler());
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = handler();
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 79)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 79));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, string>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_idRouteOrQueryResolver = routePattern?.GetParameter("id") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_id);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 81)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 81));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string, string>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_nameRouteOrQueryResolver = routePattern?.GetParameter("name") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<string>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = arg_nameRouteOrQueryResolver(httpContext, "name").ToString();
                    var result = handler(arg_name);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = arg_nameRouteOrQueryResolver(httpContext, "name").ToString();
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_name));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 82)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 82));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string, string>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_nameRouteOrQueryResolver = routePattern?.GetParameter("name") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<string>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = arg_nameRouteOrQueryResolver(httpContext, "name").ToString();
                    var result = handler(arg_name);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = arg_nameRouteOrQueryResolver(httpContext, "name").ToString();
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_name));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 84)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 84));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Choices, string>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Choices>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_c_Value = httpContext.Request.RouteValues["c"]?.ToString();
                    Choices arg_c;
                    if (arg_c_Value == null || !System.Enum.TryParse(arg_c_Value, true, out arg_c))
                    {
                        arg_c = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_c);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_c_Value = httpContext.Request.RouteValues["c"]?.ToString();
                    Choices arg_c;
                    if (arg_c_Value == null || !System.Enum.TryParse(arg_c_Value, true, out arg_c))
                    {
                        arg_c = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_c));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 103)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 103));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(int)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_xRouteOrQueryResolver = routePattern?.GetParameter("x") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_x);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_x));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 104)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 104));
            }, 
           (del, builder) => 
            {
                var handler = (System.Action<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_xRouteOrQueryResolver = routePattern?.GetParameter("x") is null ? ResolveByQuery : ResolveByRoute;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_yRouteOrQueryResolver = routePattern?.GetParameter("y") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        handler(ic.GetArgument<int>(0), ic.GetArgument<int>(1));
                        return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_y_Value = arg_yRouteOrQueryResolver(httpContext, "y").ToString();
                    int arg_y;
                    if (arg_y_Value == null || !int.TryParse(arg_y_Value, out arg_y))
                    {
                        arg_y = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    handler(arg_x, arg_y);
                    return System.Threading.Tasks.Task.CompletedTask;
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_y_Value = arg_yRouteOrQueryResolver(httpContext, "y").ToString();
                    int arg_y;
                    if (arg_y_Value == null || !int.TryParse(arg_y_Value, out arg_y))
                    {
                        arg_y = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_x, arg_y));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 105)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 105));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(int)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_xRouteOrQueryResolver = routePattern?.GetParameter("x") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_x);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_x));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 106)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 106));
            }, 
           (del, builder) => 
            {
                var handler = (System.Action<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_xRouteOrQueryResolver = routePattern?.GetParameter("x") is null ? ResolveByQuery : ResolveByRoute;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_yRouteOrQueryResolver = routePattern?.GetParameter("y") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        handler(ic.GetArgument<int>(0), ic.GetArgument<int>(1));
                        return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_y_Value = arg_yRouteOrQueryResolver(httpContext, "y").ToString();
                    int arg_y;
                    if (arg_y_Value == null || !int.TryParse(arg_y_Value, out arg_y))
                    {
                        arg_y = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    handler(arg_x, arg_y);
                    return System.Threading.Tasks.Task.CompletedTask;
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_y_Value = arg_yRouteOrQueryResolver(httpContext, "y").ToString();
                    int arg_y;
                    if (arg_y_Value == null || !int.TryParse(arg_y_Value, out arg_y))
                    {
                        arg_y = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_x, arg_y));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 107)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 107));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(int)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_xRouteOrQueryResolver = routePattern?.GetParameter("x") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_x);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_x));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 108)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 108));
            }, 
           (del, builder) => 
            {
                var handler = (System.Action<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_xRouteOrQueryResolver = routePattern?.GetParameter("x") is null ? ResolveByQuery : ResolveByRoute;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_yRouteOrQueryResolver = routePattern?.GetParameter("y") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        handler(ic.GetArgument<int>(0), ic.GetArgument<int>(1));
                        return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_y_Value = arg_yRouteOrQueryResolver(httpContext, "y").ToString();
                    int arg_y;
                    if (arg_y_Value == null || !int.TryParse(arg_y_Value, out arg_y))
                    {
                        arg_y = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    handler(arg_x, arg_y);
                    return System.Threading.Tasks.Task.CompletedTask;
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_y_Value = arg_yRouteOrQueryResolver(httpContext, "y").ToString();
                    int arg_y;
                    if (arg_y_Value == null || !int.TryParse(arg_y_Value, out arg_y))
                    {
                        arg_y = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_x, arg_y));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 109)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 109));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(int)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_xRouteOrQueryResolver = routePattern?.GetParameter("x") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_x);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_x));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 110)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 110));
            }, 
           (del, builder) => 
            {
                var handler = (System.Action<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_xRouteOrQueryResolver = routePattern?.GetParameter("x") is null ? ResolveByQuery : ResolveByRoute;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_yRouteOrQueryResolver = routePattern?.GetParameter("y") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        handler(ic.GetArgument<int>(0), ic.GetArgument<int>(1));
                        return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_y_Value = arg_yRouteOrQueryResolver(httpContext, "y").ToString();
                    int arg_y;
                    if (arg_y_Value == null || !int.TryParse(arg_y_Value, out arg_y))
                    {
                        arg_y = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    handler(arg_x, arg_y);
                    return System.Threading.Tasks.Task.CompletedTask;
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_y_Value = arg_yRouteOrQueryResolver(httpContext, "y").ToString();
                    int arg_y;
                    if (arg_y_Value == null || !int.TryParse(arg_y_Value, out arg_y))
                    {
                        arg_y = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_x, arg_y));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 111)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 111));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(int)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_xRouteOrQueryResolver = routePattern?.GetParameter("x") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_x);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_x));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 112)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 112));
            }, 
           (del, builder) => 
            {
                var handler = (System.Action<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_xRouteOrQueryResolver = routePattern?.GetParameter("x") is null ? ResolveByQuery : ResolveByRoute;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_yRouteOrQueryResolver = routePattern?.GetParameter("y") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        handler(ic.GetArgument<int>(0), ic.GetArgument<int>(1));
                        return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_y_Value = arg_yRouteOrQueryResolver(httpContext, "y").ToString();
                    int arg_y;
                    if (arg_y_Value == null || !int.TryParse(arg_y_Value, out arg_y))
                    {
                        arg_y = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    handler(arg_x, arg_y);
                    return System.Threading.Tasks.Task.CompletedTask;
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_x_Value = arg_xRouteOrQueryResolver(httpContext, "x").ToString();
                    int arg_x;
                    if (arg_x_Value == null || !int.TryParse(arg_x_Value, out arg_x))
                    {
                        arg_x = default;
                        wasParamCheckFailure = true;
                    }
                    var arg_y_Value = arg_yRouteOrQueryResolver(httpContext, "y").ToString();
                    int arg_y;
                    if (arg_y_Value == null || !int.TryParse(arg_y_Value, out arg_y))
                    {
                        arg_y = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_x, arg_y));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 113)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 113));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(int)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, int>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_n_Value = httpContext.Request.RouteValues["n"]?.ToString();
                    int arg_n;
                    if (arg_n_Value == null || !int.TryParse(arg_n_Value, out arg_n))
                    {
                        arg_n = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_n);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_n_Value = httpContext.Request.RouteValues["n"]?.ToString();
                    int arg_n;
                    if (arg_n_Value == null || !int.TryParse(arg_n_Value, out arg_n))
                    {
                        arg_n = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_n));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 124)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 124));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string, string>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<string>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = httpContext.Request.RouteValues["name"]?.ToString();
                    var result = handler(arg_name);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = httpContext.Request.RouteValues["name"]?.ToString();
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_name));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 126)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 126));
                builder.Metadata.Add(ResponseTypeMetadata.Create("application/json", typeof(Parsable)));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Parsable, Parsable>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Parsable>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_p_Value = httpContext.Request.Query["p"].ToString();
                    Parsable arg_p;
                    if (arg_p_Value == null || !Parsable.TryParse(arg_p_Value, System.Globalization.CultureInfo.InvariantCulture, out arg_p))
                    {
                        arg_p = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_p);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_p_Value = httpContext.Request.Query["p"].ToString();
                    Parsable arg_p;
                    if (arg_p_Value == null || !Parsable.TryParse(arg_p_Value, System.Globalization.CultureInfo.InvariantCulture, out arg_p))
                    {
                        arg_p = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_p));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Program.cs", 128)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Program.cs", 128));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Microsoft.AspNetCore.Http.HttpContext, string>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Microsoft.AspNetCore.Http.HttpContext>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_context = httpContext;
                    var result = handler(arg_context);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_context = httpContext;
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_context));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),

            [(@"C:\dev\git\uController\samples\Wrapper.cs", 15)] = (
           (del, builder) => 
            {

                builder.Metadata.Add(new SourceKey(@"C:\dev\git\uController\samples\Wrapper.cs", 15));
                builder.Metadata.Add(ResponseTypeMetadata.Create("text/plain"));
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, string>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_idRouteOrQueryResolver = routePattern?.GetParameter("id") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_id);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            }),


    };
        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<TodoDbContext, System.Threading.Tasks.Task<System.Collections.Generic.List<Todo>>> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int, TodoDbContext, System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IResult>> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP PUT requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPut(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int, Todo, TodoDbContext, System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IResult>> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PutVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<Todo, TodoDbContext, System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IResult>> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP DELETE requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapDelete(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int, TodoDbContext, System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IResult>> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, DeleteVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<string, string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet<T>(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<T> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore<T>(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<Person> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<System.Security.Claims.ClaimsPrincipal, ISayHello, Microsoft.AspNetCore.Http.IResult> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<System.Text.Json.Nodes.JsonNode, System.Text.Json.Nodes.JsonNode> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<Model, Model> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Action<Model> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<Microsoft.AspNetCore.Http.IFormFile, string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<string, Microsoft.AspNetCore.Http.IResult> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<Microsoft.AspNetCore.Http.IFormCollection, string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<MinimalApis.Extensions.Binding.Body<string>, string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<MinimalApis.Extensions.Binding.Validated<Model>, Microsoft.AspNetCore.Http.IResult> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<System.Threading.CancellationToken, object> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder Map(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int?, Microsoft.AspNetCore.Http.IResult> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, null, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<System.IO.Stream, Microsoft.AspNetCore.Http.IResult> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<System.IO.Pipelines.PipeReader, Microsoft.AspNetCore.Http.IResult> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP PATCH requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPatch(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<Microsoft.AspNetCore.Http.HttpRequest, Microsoft.AspNetCore.Http.HttpResponse, System.Threading.Tasks.Task> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PatchVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<Microsoft.Extensions.Primitives.StringValues, string?[]> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<string[], string[]> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int[], int[]> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int, string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<Choices, string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder Map(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int, int> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, null, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder Map(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Action<int, int> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, null, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP PUT requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPut(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int, int> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PutVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP PUT requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPut(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Action<int, int> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PutVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int, int> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP POST requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Action<int, int> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PostVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP DELETE requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapDelete(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int, int> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, DeleteVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP DELETE requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapDelete(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Action<int, int> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, DeleteVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP PATCH requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPatch(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<int, int> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PatchVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP PATCH requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPatch(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Action<int, int> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, PatchVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<Parsable, Parsable> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

        /// <summary>
        /// Adds a <see cref="RouteEndpoint"/> to the <see cref="IEndpointRouteBuilder"/> that matches HTTP GET requests
        /// for the specified pattern.
        /// </summary>
        /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
        /// <param name="pattern">The route pattern.</param>
        /// <param name="handler">The delegate executed when the endpoint is matched.</param>
        /// <returns>A <see cref="RouteHandlerBuilder"/> that can be used to further customize the endpoint.</returns>
        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern, System.Func<Microsoft.AspNetCore.Http.HttpContext, string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(endpoints, pattern, handler, GetVerb, filePath, lineNumber);
        }

    private static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapCore<T>(
        this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, 
        string pattern, 
        System.Delegate handler,
        IEnumerable<string> httpMethods,
        string filePath,
        int lineNumber)
    {
        var (populate, factory) = GenericThunks<T>.map[(filePath, lineNumber)];

        return GetOrAddRouteEndpointDataSource(routes).AddRouteHandler(RoutePatternFactory.Parse(pattern), handler, httpMethods, isFallback: false, populate, factory);
    }

    private static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapCore(
        this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, 
        string pattern, 
        System.Delegate handler,
        IEnumerable<string> httpMethods,
        string filePath,
        int lineNumber)
    {
        var (populate, factory) = map[(filePath, lineNumber)];

        return GetOrAddRouteEndpointDataSource(routes).AddRouteHandler(RoutePatternFactory.Parse(pattern), handler, httpMethods, isFallback: false, populate, factory);
    }

    private static SourceGeneratedRouteEndpointDataSource GetOrAddRouteEndpointDataSource(IEndpointRouteBuilder endpoints)
    {
        SourceGeneratedRouteEndpointDataSource routeEndpointDataSource = null;

        foreach (var dataSource in endpoints.DataSources)
        {
            if (dataSource is SourceGeneratedRouteEndpointDataSource foundDataSource)
            {
                routeEndpointDataSource = foundDataSource;
                break;
            }
        }

        if (routeEndpointDataSource is null)
        {
            routeEndpointDataSource = new SourceGeneratedRouteEndpointDataSource(endpoints.ServiceProvider);
            endpoints.DataSources.Add(routeEndpointDataSource);
        }

        return routeEndpointDataSource;
    }

    private static EndpointFilterDelegate BuildFilterDelegate(EndpointFilterDelegate filteredInvocation, EndpointBuilder builder, System.Reflection.MethodInfo mi)
    {
        var routeHandlerFilters =  builder.FilterFactories;

        var context0 = new EndpointFilterFactoryContext
        {
            MethodInfo = mi,
            ApplicationServices = builder.ApplicationServices,
        };

        var initialFilteredInvocation = filteredInvocation;

        for (var i = routeHandlerFilters.Count - 1; i >= 0; i--)
        {
            var filterFactory = routeHandlerFilters[i];
            filteredInvocation = filterFactory(context0, filteredInvocation);
        }

        return filteredInvocation;
    }

    private static void PopulateMetadata<T>(System.Reflection.MethodInfo method, EndpointBuilder builder) where T : Microsoft.AspNetCore.Http.Metadata.IEndpointMetadataProvider
    {
        T.PopulateMetadata(method, builder);
    }

    private static void PopulateMetadata<T>(System.Reflection.ParameterInfo parameter, EndpointBuilder builder) where T : Microsoft.AspNetCore.Http.Metadata.IEndpointParameterMetadataProvider
    {
        T.PopulateMetadata(parameter, builder);
    }

    private static Task ExecuteObjectResult(object obj, HttpContext httpContext)
    {
        if (obj is IResult r)
        {
            return r.ExecuteAsync(httpContext);
        }
        else if (obj is string s)
        {
            return httpContext.Response.WriteAsync(s);
        }
        else
        {
            return httpContext.Response.WriteAsJsonAsync(obj);
        }
    }

    private static Microsoft.Extensions.Primitives.StringValues ResolveByQuery(HttpContext context, string key) => context.Request.Query[key];
    private static Microsoft.Extensions.Primitives.StringValues ResolveByRoute(HttpContext context, string key) => context.Request.RouteValues[key]?.ToString();
    private static ValueTask<T> ResolveService<T>(HttpContext httpContext) => new ValueTask<T>(httpContext.RequestServices.GetRequiredService<T>());
    private static async ValueTask<T> ResolveBody<T>(HttpContext httpContext)
    {
        var feature = httpContext.Features.Get<Microsoft.AspNetCore.Http.Features.IHttpRequestBodyDetectionFeature>();

        if (feature?.CanHaveBody == true)
        {
            if (!httpContext.Request.HasJsonContentType())
            {
                httpContext.Response.StatusCode = StatusCodes.Status415UnsupportedMediaType;
                return default;
            }
            try
            {
                return await httpContext.Request.ReadFromJsonAsync<T>();
            }
            catch (IOException)
            {
                return default;
            }
            catch (System.Text.Json.JsonException)
            {
                httpContext.Response.StatusCode = StatusCodes.Status400BadRequest;
                return default;
            }
        }
        return default;
    }

    private sealed class ResponseTypeMetadata : Microsoft.AspNetCore.Http.Metadata.IProducesResponseTypeMetadata
    {
        public Type Type { get; set; } = typeof(void);

        public int StatusCode { get; set; } = 200;

        public IEnumerable<string> ContentTypes { get; init; } = Enumerable.Empty<string>();

        public static ResponseTypeMetadata Create(string contentType, Type type = null)
        {
            return new ResponseTypeMetadata { ContentTypes = new[] { contentType }, Type = type };
        }

        public static ResponseTypeMetadata Create(int statusCode)
        {
            return new ResponseTypeMetadata { StatusCode = statusCode };
        }
    }

    private sealed class SourceGeneratedRouteEndpointDataSource : EndpointDataSource
    {
        private readonly List<RouteEntry> _routeEntries = new();
        private readonly IServiceProvider _applicationServices;

        public SourceGeneratedRouteEndpointDataSource(IServiceProvider applicationServices)
        {
            _applicationServices = applicationServices;
        }

        public RouteHandlerBuilder AddRouteHandler(
            RoutePattern pattern,
            Delegate routeHandler,
            IEnumerable<string> httpMethods,
            bool isFallback,
            MetadataPopulator metadataPopulator,
            RequestDelegateFactoryFunc requestDelegateFactoryFunc)
        {
            var conventions = new ThrowOnAddAfterEndpointBuiltConventionCollection();
            var finallyConventions = new ThrowOnAddAfterEndpointBuiltConventionCollection();

            var routeAttributes = RouteAttributes.RouteHandler;
            if (isFallback)
            {
                routeAttributes |= RouteAttributes.Fallback;
            }

            _routeEntries.Add(new()
            {
                RoutePattern = pattern,
                RouteHandler = routeHandler,
                HttpMethods = httpMethods,
                RouteAttributes = routeAttributes,
                Conventions = conventions,
                FinallyConventions = finallyConventions,
                RequestDelegateFactory = requestDelegateFactoryFunc,
                MetadataPopulator = metadataPopulator,
            });

            return new RouteHandlerBuilder(new[] { new ConventionBuilder(conventions, finallyConventions) });
        }

        public override IReadOnlyList<RouteEndpoint> Endpoints
        {
            get
            {
                var endpoints = new RouteEndpoint[_routeEntries.Count];
                for (int i = 0; i < _routeEntries.Count; i++)
                {
                    endpoints[i] = (RouteEndpoint)CreateRouteEndpointBuilder(_routeEntries[i]).Build();
                }
                return endpoints;
            }
        }

        public override IReadOnlyList<RouteEndpoint> GetGroupedEndpoints(RouteGroupContext context)
        {
            var endpoints = new RouteEndpoint[_routeEntries.Count];
            for (int i = 0; i < _routeEntries.Count; i++)
            {
                endpoints[i] = (RouteEndpoint)CreateRouteEndpointBuilder(_routeEntries[i], context.Prefix, context.Conventions, context.FinallyConventions).Build();
            }
            return endpoints;
        }

        public override IChangeToken GetChangeToken() => NullChangeToken.Singleton;

        private RouteEndpointBuilder CreateRouteEndpointBuilder(
            RouteEntry entry, RoutePattern groupPrefix = null, IReadOnlyList<Action<EndpointBuilder>> groupConventions = null, IReadOnlyList<Action<EndpointBuilder>> groupFinallyConventions = null)
        {
            var pattern = RoutePatternFactory.Combine(groupPrefix, entry.RoutePattern);
            var handler = entry.RouteHandler;
            var isRouteHandler = (entry.RouteAttributes & RouteAttributes.RouteHandler) == RouteAttributes.RouteHandler;
            var isFallback = (entry.RouteAttributes & RouteAttributes.Fallback) == RouteAttributes.Fallback;

            var order = isFallback ? int.MaxValue : 0;
            var displayName = pattern.RawText ?? pattern.ToString();

            if (entry.HttpMethods is not null)
            {
                // Prepends the HTTP method to the DisplayName produced with pattern + method name
                displayName = $"HTTP: {string.Join(", ", entry.HttpMethods)} {displayName}";
            }

            if (isFallback)
            {
                displayName = $"Fallback {displayName}";
            }

            // If we're not a route handler, we started with a fully realized (although unfiltered) RequestDelegate, so we can just redirect to that
            // while running any conventions. We'll put the original back if it remains unfiltered right before building the endpoint.
            RequestDelegate factoryCreatedRequestDelegate = null;

            // Let existing conventions capture and call into builder.RequestDelegate as long as they do so after it has been created.
            RequestDelegate redirectRequestDelegate = context =>
            {
                if (factoryCreatedRequestDelegate is null)
                {
                    throw new InvalidOperationException("Resources.RouteEndpointDataSource_RequestDelegateCannotBeCalledBeforeBuild");
                }

                return factoryCreatedRequestDelegate(context);
            };

            // Add MethodInfo and HttpMethodMetadata (if any) as first metadata items as they are intrinsic to the route much like
            // the pattern or default display name. This gives visibility to conventions like WithOpenApi() to intrinsic route details
            // (namely the MethodInfo) even when applied early as group conventions.
            RouteEndpointBuilder builder = new(redirectRequestDelegate, pattern, order)
            {
                DisplayName = displayName,
                ApplicationServices = _applicationServices,
            };

            if (isRouteHandler)
            {
                builder.Metadata.Add(handler.Method);
            }

            if (entry.HttpMethods is not null)
            {
                builder.Metadata.Add(new HttpMethodMetadata(entry.HttpMethods));
            }

            // Apply group conventions before entry-specific conventions added to the RouteHandlerBuilder.
            if (groupConventions is not null)
            {
                foreach (var groupConvention in groupConventions)
                {
                    groupConvention(builder);
                }
            }

            // Any metadata inferred directly inferred by RDF or indirectly inferred via IEndpoint(Parameter)MetadataProviders are
            // considered less specific than method-level attributes and conventions but more specific than group conventions
            // so inferred metadata gets added in between these. If group conventions need to override inferred metadata,
            // they can do so via IEndpointConventionBuilder.Finally like the do to override any other entry-specific metadata.
            if (isRouteHandler)
            {
                entry.MetadataPopulator(entry.RouteHandler, builder);
            }

            // Add delegate attributes as metadata before entry-specific conventions but after group conventions.
            var attributes = handler.Method.GetCustomAttributes();
            if (attributes is not null)
            {
                foreach (var attribute in attributes)
                {
                    builder.Metadata.Add(attribute);
                }
            }

            entry.Conventions.IsReadOnly = true;
            foreach (var entrySpecificConvention in entry.Conventions)
            {
                entrySpecificConvention(builder);
            }

            // If no convention has modified builder.RequestDelegate, we can use the RequestDelegate returned by the RequestDelegateFactory directly.
            var conventionOverriddenRequestDelegate = ReferenceEquals(builder.RequestDelegate, redirectRequestDelegate) ? null : builder.RequestDelegate;

            if (isRouteHandler || builder.FilterFactories.Count > 0)
            {
                factoryCreatedRequestDelegate = entry.RequestDelegateFactory(entry.RouteHandler, builder);
            }

            Debug.Assert(factoryCreatedRequestDelegate is not null);

            // Use the overridden RequestDelegate if it exists. If the overridden RequestDelegate is merely wrapping the final RequestDelegate,
            // it will still work because of the redirectRequestDelegate.
            builder.RequestDelegate = conventionOverriddenRequestDelegate ?? factoryCreatedRequestDelegate;

            entry.FinallyConventions.IsReadOnly = true;
            foreach (var entryFinallyConvention in entry.FinallyConventions)
            {
                entryFinallyConvention(builder);
            }

            if (groupFinallyConventions is not null)
            {
                // Group conventions are ordered by the RouteGroupBuilder before
                // being provided here.
                foreach (var groupFinallyConvention in groupFinallyConventions)
                {
                    groupFinallyConvention(builder);
                }
            }

            return builder;
        }
        private struct RouteEntry
        {
            public MetadataPopulator MetadataPopulator { get; init; }
            public RequestDelegateFactoryFunc RequestDelegateFactory { get; init; }
            public RoutePattern RoutePattern { get; init; }
            public Delegate RouteHandler { get; init; }
            public IEnumerable<string> HttpMethods { get; init; }
            public RouteAttributes RouteAttributes { get; init; }
            public ThrowOnAddAfterEndpointBuiltConventionCollection Conventions { get; init; }
            public ThrowOnAddAfterEndpointBuiltConventionCollection FinallyConventions { get; init; }
        }

        [Flags]
        private enum RouteAttributes
        {
            // The endpoint was defined by a RequestDelegate, RequestDelegateFactory.Create() should be skipped unless there are endpoint filters.
            None = 0,
            // This was added as Delegate route handler, so RequestDelegateFactory.Create() should always be called.
            RouteHandler = 1,
            // This was added by MapFallback.
            Fallback = 2,
        }

        // This private class is only exposed to internal code via ICollection<Action<EndpointBuilder>> in RouteEndpointBuilder where only Add is called.
        private sealed class ThrowOnAddAfterEndpointBuiltConventionCollection : List<Action<EndpointBuilder>>, ICollection<Action<EndpointBuilder>>
        {
            // We throw if someone tries to add conventions to the RouteEntry after endpoints have already been resolved meaning the conventions
            // will not be observed given RouteEndpointDataSource is not meant to be dynamic and uses NullChangeToken.Singleton.
            public bool IsReadOnly { get; set; }

            void ICollection<Action<EndpointBuilder>>.Add(Action<EndpointBuilder> convention)
            {
                if (IsReadOnly)
                {
                    throw new InvalidOperationException("Resources.RouteEndpointDataSource_ConventionsCannotBeModifiedAfterBuild");
                }

                Add(convention);
            }
        }

        private class ConventionBuilder : IEndpointConventionBuilder
        {
            private readonly ICollection<Action<EndpointBuilder>> _conventions;
            private readonly ICollection<Action<EndpointBuilder>> _finallyConventions;
            public ConventionBuilder(ICollection<Action<EndpointBuilder>> conventions, ICollection<Action<EndpointBuilder>> finallyConventions)
            {
                _conventions = conventions;
                _finallyConventions = finallyConventions;
            }

            /// <summary>
            /// Adds the specified convention to the builder. Conventions are used to customize <see cref="EndpointBuilder"/> instances.
            /// </summary>
            /// <param name="convention">The convention to add to the builder.</param>
            public void Add(Action<EndpointBuilder> convention)
            {
                _conventions.Add(convention);
            }
            public void Finally(Action<EndpointBuilder> finalConvention)
            {
                _finallyConventions.Add(finalConvention);
            }
        }
    }
}
#endif

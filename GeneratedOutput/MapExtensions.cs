
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#if NET7_0_OR_GREATER
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;

namespace Microsoft.AspNetCore.Builder
{
    delegate void MetadataPopulator(System.Delegate handler, Microsoft.AspNetCore.Builder.EndpointBuilder builder);
    delegate Microsoft.AspNetCore.Http.RequestDelegate RequestDelegateFactoryFunc(System.Delegate handler, Microsoft.AspNetCore.Builder.EndpointBuilder builder);

    public static class MapActionsExtensions
    {
        private static readonly System.Collections.Generic.Dictionary<(string, int), (MetadataPopulator, RequestDelegateFactoryFunc)> map = new();
        static MapActionsExtensions()
        {
            map[(@"C:\dev\git\uController\samples\MapProductsExtensions.cs", 10)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Microsoft.AspNetCore.Http.HttpResults.Ok<Product[]>>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler());
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = handler();
                    return result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\MapProductsExtensions.cs", 11)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.HttpResults.Results<Microsoft.AspNetCore.Http.HttpResults.Ok<Product>, Microsoft.AspNetCore.Http.HttpResults.NotFound>>>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = httpContext.Request.RouteValues["id"]?.ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return;
                    }
                    var result = await handler(arg_id);
                    await result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = httpContext.Request.RouteValues["id"]?.ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 14)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler());
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = handler();
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 15)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string, string>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<string>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = httpContext.Request.RouteValues["name"]?.ToString();
                    var result = handler(arg_name);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_name = httpContext.Request.RouteValues["name"]?.ToString();
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_name));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 17)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Person>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler());
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = handler();
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 19)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<System.Security.Claims.ClaimsPrincipal, ISayHello, Microsoft.AspNetCore.Http.IResult>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var ispis = builder.ApplicationServices.GetService<IServiceProviderIsService>();
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<ISayHello>> arg_hellosvcServiceOrBodyResolver = (ispis?.IsService(typeof(ISayHello)) ?? false) ? ResolveService<ISayHello> : ResolveBody<ISayHello>;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<System.Security.Claims.ClaimsPrincipal>(0), ic.GetArgument<ISayHello>(1)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_c = httpContext.User;
                    var arg_hellosvc = await arg_hellosvcServiceOrBodyResolver(httpContext);
                    var result = handler(arg_c, arg_hellosvc);
                    await result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_c = httpContext.User;
                    var arg_hellosvc = await arg_hellosvcServiceOrBodyResolver(httpContext);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_c, arg_hellosvc));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 21)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<System.Text.Json.Nodes.JsonNode, System.Text.Json.Nodes.JsonNode>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var ispis = builder.ApplicationServices.GetService<IServiceProviderIsService>();
                System.Func<HttpContext, System.Threading.Tasks.ValueTask<System.Text.Json.Nodes.JsonNode>> arg_nodeServiceOrBodyResolver = (ispis?.IsService(typeof(System.Text.Json.Nodes.JsonNode)) ?? false) ? ResolveService<System.Text.Json.Nodes.JsonNode> : ResolveBody<System.Text.Json.Nodes.JsonNode>;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<System.Text.Json.Nodes.JsonNode>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_node = await arg_nodeServiceOrBodyResolver(httpContext);
                    var result = handler(arg_node);
                    await httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_node = await arg_nodeServiceOrBodyResolver(httpContext);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_node));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 23)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Model, Model>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var parameterInfos = del.Method.GetParameters();

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Model>(0)));
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_m = await Model.BindAsync(httpContext, parameterInfos[0]);
                    var result = handler(arg_m);
                    await httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_m = await Model.BindAsync(httpContext, parameterInfos[0]);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_m));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 24)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Action<Model>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var parameterInfos = del.Method.GetParameters();

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        handler(ic.GetArgument<Model>(0));
                        return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                    },
                    builder,
                    handler.Method);
                }

                async System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_m = await Model.BindAsync(httpContext, parameterInfos[0]);
                                        handler(arg_m);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_m = await Model.BindAsync(httpContext, parameterInfos[0]);
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_m));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 26)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<System.Threading.CancellationToken, object>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<System.Threading.CancellationToken>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_ct = httpContext.RequestAborted;
                    var result = handler(arg_ct);
                    return ExecuteObjectResult(result, httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_ct = httpContext.RequestAborted;
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_ct));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 30)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int?, Microsoft.AspNetCore.Http.IResult>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_idRouteOrQueryResolver = routePattern?.GetParameter("id") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int?>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int? arg_id;
                    if (arg_id_Value != null && int.TryParse(arg_id_Value, out var arg_id_Temp))
                    {
                        arg_id = arg_id_Temp;
                    }
                    else
                    {
                        arg_id = default;
                    }
                    var result = handler(arg_id);
                    return result.ExecuteAsync(httpContext);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int? arg_id;
                    if (arg_id_Value != null && int.TryParse(arg_id_Value, out var arg_id_Temp))
                    {
                        arg_id = arg_id_Temp;
                    }
                    else
                    {
                        arg_id = default;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 32)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Microsoft.AspNetCore.Http.HttpRequest, Microsoft.AspNetCore.Http.HttpResponse, System.Threading.Tasks.Task>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Microsoft.AspNetCore.Http.HttpRequest>(0), ic.GetArgument<Microsoft.AspNetCore.Http.HttpResponse>(1)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_req = httpContext.Request;
                    var arg_resp = httpContext.Response;
                    return handler(arg_req, arg_resp);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_req = httpContext.Request;
                    var arg_resp = httpContext.Response;
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_req, arg_resp));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 34)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Microsoft.Extensions.Primitives.StringValues, string?[]>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_queriesRouteOrQueryResolver = routePattern?.GetParameter("queries") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<Microsoft.Extensions.Primitives.StringValues>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_queries = arg_queriesRouteOrQueryResolver(httpContext, "queries");
                    var result = handler(arg_queries);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_queries = arg_queriesRouteOrQueryResolver(httpContext, "queries");
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_queries));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 35)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string[], string[]>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_queriesRouteOrQueryResolver = routePattern?.GetParameter("queries") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<string[]>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_queries = arg_queriesRouteOrQueryResolver(httpContext, "queries").ToArray();
                    var result = handler(arg_queries);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_queries = arg_queriesRouteOrQueryResolver(httpContext, "queries").ToArray();
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_queries));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 36)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int[], int[]>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_queriesRouteOrQueryResolver = routePattern?.GetParameter("queries") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int[]>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_queries_Value = arg_queriesRouteOrQueryResolver(httpContext, "queries").ToArray();
                    int[] arg_queries = default;
                    for (var i = 0; i < arg_queries.Length; i++)
                    {
                        arg_queries ??= new int[arg_queries_Value.Length];
                        if (arg_queries_Value[i] == null || !int.TryParse(arg_queries_Value[i], out arg_queries[i]))
                        {
                            arg_queries[i] = default;
                            wasParamCheckFailure = true;
                        }
                    }
                    arg_queries ??= System.Array.Empty<int>();
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_queries);
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_queries_Value = arg_queriesRouteOrQueryResolver(httpContext, "queries").ToArray();
                    int[] arg_queries = default;
                    for (var i = 0; i < arg_queries.Length; i++)
                    {
                        arg_queries ??= new int[arg_queries_Value.Length];
                        if (arg_queries_Value[i] == null || !int.TryParse(arg_queries_Value[i], out arg_queries[i]))
                        {
                            arg_queries[i] = default;
                            wasParamCheckFailure = true;
                        }
                    }
                    arg_queries ??= System.Array.Empty<int>();
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_queries));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 41)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<Person>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler());
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = handler();
                    return httpContext.Response.WriteAsJsonAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 47)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, string>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_idRouteOrQueryResolver = routePattern?.GetParameter("id") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_id);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 54)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, string>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_idRouteOrQueryResolver = routePattern?.GetParameter("id") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_id);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 60)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<string, string>)del;
                EndpointFilterDelegate filteredInvocation = null;

                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<string>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_s = httpContext.Request.RouteValues["s"]?.ToString();
                    var result = handler(arg_s);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var arg_s = httpContext.Request.RouteValues["s"]?.ToString();
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_s));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

            map[(@"C:\dev\git\uController\samples\Program.cs", 75)] = (
           (del, builder) => 
            {
                
            }, 
           (del, builder) => 
            {
                var handler = (System.Func<int, string>)del;
                EndpointFilterDelegate filteredInvocation = null;
                var routePattern = (builder as RouteEndpointBuilder)?.RoutePattern;
                System.Func<HttpContext, string, Microsoft.Extensions.Primitives.StringValues> arg_idRouteOrQueryResolver = routePattern?.GetParameter("id") is null ? ResolveByQuery : ResolveByRoute;
                if (builder.FilterFactories.Count > 0)
                {
                    filteredInvocation = BuildFilterDelegate(ic => 
                    {
                        if (ic.HttpContext.Response.StatusCode == 400)
                        {
                            return System.Threading.Tasks.ValueTask.FromResult<object>(Results.Empty);
                        }
                        return System.Threading.Tasks.ValueTask.FromResult<object>(handler(ic.GetArgument<int>(0)));
                    },
                    builder,
                    handler.Method);
                }

                System.Threading.Tasks.Task RequestHandler(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                        return Task.CompletedTask;
                    }
                    var result = handler(arg_id);
                    return httpContext.Response.WriteAsync(result);
                }
                
                async System.Threading.Tasks.Task RequestHandlerFiltered(Microsoft.AspNetCore.Http.HttpContext httpContext)
                {
                    var wasParamCheckFailure = false;
                    var arg_id_Value = arg_idRouteOrQueryResolver(httpContext, "id").ToString();
                    int arg_id;
                    if (arg_id_Value == null || !int.TryParse(arg_id_Value, out arg_id))
                    {
                        arg_id = default;
                        wasParamCheckFailure = true;
                    }
                    if (wasParamCheckFailure)
                    {
                        httpContext.Response.StatusCode = 400;
                    }
                    var result = await filteredInvocation(new DefaultEndpointFilterInvocationContext(httpContext, arg_id));
                    await ExecuteObjectResult(result, httpContext);
                }

                return filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;
            });

        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<Microsoft.AspNetCore.Http.HttpResults.Ok<Product[]>> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<int, System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.HttpResults.Results<Microsoft.AspNetCore.Http.HttpResults.Ok<Product>, Microsoft.AspNetCore.Http.HttpResults.NotFound>>> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<string, string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<Person> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<System.Security.Claims.ClaimsPrincipal, ISayHello, Microsoft.AspNetCore.Http.IResult> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<System.Text.Json.Nodes.JsonNode, System.Text.Json.Nodes.JsonNode> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapPost(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<Model, Model> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapPost(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Action<Model> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapPost(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<System.Threading.CancellationToken, object> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder Map(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<int?, Microsoft.AspNetCore.Http.IResult> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.Map(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPatch(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<Microsoft.AspNetCore.Http.HttpRequest, Microsoft.AspNetCore.Http.HttpResponse, System.Threading.Tasks.Task> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapPatch(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<Microsoft.Extensions.Primitives.StringValues, string?[]> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<string[], string[]> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<int[], int[]> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        internal static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapGet(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, string pattern, System.Func<int, string> handler, [System.Runtime.CompilerServices.CallerFilePath] string filePath = "", [System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)
        {
            return MapCore(routes, pattern, handler, static (r, p, h) => r.MapGet(p, h), filePath, lineNumber);
        }

        private static Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapCore(
            this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder routes, 
            string pattern, 
            System.Delegate handler, 
            Func<Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, string, System.Delegate, Microsoft.AspNetCore.Builder.RouteHandlerBuilder> mapper,
            string filePath,
            int lineNumber)
        {
            var (populate, factory) = map[(filePath, lineNumber)];
            var conventionBuilder = mapper(routes, pattern, handler);

            conventionBuilder.Add(e =>
            {
                populate(handler, e);
            });

            conventionBuilder.Finally(e =>
            {
                e.RequestDelegate = factory(handler, e);
            });

            return conventionBuilder;
        }

        private static EndpointFilterDelegate BuildFilterDelegate(EndpointFilterDelegate filteredInvocation, EndpointBuilder builder, System.Reflection.MethodInfo mi)
        {
            var routeHandlerFilters =  builder.FilterFactories;

            var context0 = new EndpointFilterFactoryContext
            {
                MethodInfo = mi,
                ApplicationServices = builder.ApplicationServices,
            };

            var initialFilteredInvocation = filteredInvocation;

            for (var i = routeHandlerFilters.Count - 1; i >= 0; i--)
            {
                var filterFactory = routeHandlerFilters[i];
                filteredInvocation = filterFactory(context0, filteredInvocation);
            }

            return filteredInvocation;
        }

        private static void PopulateMetadata<T>(System.Reflection.MethodInfo method, EndpointBuilder builder) where T : Microsoft.AspNetCore.Http.Metadata.IEndpointMetadataProvider
        {
            T.PopulateMetadata(method, builder);
        }

        private static Task ExecuteObjectResult(object obj, HttpContext httpContext)
        {
            if (obj is IResult r)
            {
                return r.ExecuteAsync(httpContext);
            }
            else if (obj is string s)
            {
                return httpContext.Response.WriteAsync(s);
            }
            else
            {
                return httpContext.Response.WriteAsJsonAsync(obj);
            }
        }

        private static Microsoft.Extensions.Primitives.StringValues ResolveByQuery(HttpContext context, string key) => context.Request.Query[key];
        private static Microsoft.Extensions.Primitives.StringValues ResolveByRoute(HttpContext context, string key) => context.Request.RouteValues[key]?.ToString();
        private static ValueTask<T> ResolveService<T>(HttpContext context) => new ValueTask<T>(context.RequestServices.GetRequiredService<T>());
        private static ValueTask<T> ResolveBody<T>(HttpContext context) => context.Request.ReadFromJsonAsync<T>();
    }
}
#endif
